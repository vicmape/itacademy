for ((i=1;i<=10;i++)); 
do 
   # your-unix-command-here
   echo "($(( ( RANDOM % 5 )  + 1 )), $(( ( RANDOM % 5 )  + 1 )), 'blue', 'blue', $i.99, $(( ( RANDOM % 3 )  + 1 )),  $(( ( RANDOM % 20 )  + 1 )) ),"
done

********************


seq -f "%g/04/2018" 10



****************************




SELECT 
	name, 
    unit_price, 
    (unit_price * 1.1) AS "new price"
FROM sql_store.products;

SELECT *
FROM sql_store.orders
WHERE order_date >= '2019-01-01';

 SELECT *
 FROM sql_store.order_items
 WHERE order_id = 6 AND (quantity * unit_price) > 30;
 
 SELECT *
 FROM sql_store.products
 WHERE quantity_in_stock IN (38, 49, 72);
 
 SELECT *
 FROM sql_store.customers
 WHERE birth_date BETWEEN '1990-01-01 ' and '2000-01-01';
 
 SELECT *
 FROM	sql_store.customers
 WHERE	address LIKE '%TRAIL%' OR
		address LIKE '%AVENUE%' OR
		phone LIKE '%9';
        
SELECT *
FROM sql_store.customers
WHERE first_name REGEXP 'elka|ambur';

SELECT *
FROM sql_store.customers
WHERE last_name REGEXP 'ey$|on$';

SELECT * 
FROM sql_store.customers
WHERE last_name REGEXP '^MY|SE';

SELECT * 
FROM sql_store.customers
WHERE last_name REGEXP 'b[ru]';

SELECT *
FROM sql_store.orders
WHERE shipped_date IS NULL;

SELECT *
FROM sql_store.order_items
WHERE order_id = 2
ORDER BY (quantity*unit_price) DESC;

SELECT * 
FROM sql_store.customers
ORDER BY points DESC
LIMIT 3;

SELECT oi.order_id, oi.product_id, p.name, oi.quantity, oi.unit_price
FROM order_items oi
JOIN products p
	ON oi.product_id = p.product_id;


SELECT
	p.payment_id,
    c.name,
    pm.name
FROM sql_invoicing.payments p
JOIN sql_invoicing.clients c
	ON p.client_id = c.client_id
JOIN sql_invoicing.payment_methods pm
	ON p.payment_method = pm.payment_method_id;

SELECT 
	p.product_id,
    p.name,
    oi.quantity
FROM sql_store.products p
LEFT JOIN sql_store.order_items oi
	ON p.product_id = oi.product_id;


SELECT 
	o.order_date,
    o.order_id,
    c.first_name,
    sh.name AS shipper,
    os.name AS status
FROM orders o
JOIN customers c
	ON o.customer_id = c.customer_id
LEFT JOIN shippers sh
	ON o.shipper_id = sh.shipper_id
JOIN order_statuses os
	ON o.status = os.order_status_id
ORDER BY os.name;


*********************************************


SELECT
	p.date,
    c.name AS client,
    p.amount,
    pm.name AS name
FROM sql_invoicing.payments p
JOIN sql_invoicing.clients c
	USING (client_id)
JOIN sql_invoicing.payment_methods pm
	ON p.payment_method = pm.payment_method_id


USE sql_store;

SELECT
	sh.name AS shippers,
    p.name AS product
FROM shippers sh
CROSS JOIN products p

 

USE sql_store;

SELECT
	customer_id,
    first_name,
    points,
    'Bronze' AS type
FROM customers
WHERE points < 2000
UNION
SELECT
	customer_id,
    first_name,
    points,
    'Silver' AS type
FROM customers
WHERE points BETWEEN 2000 AND 3000
UNION
SELECT
	customer_id,
    first_name,
    points,
    'Gold' AS type
FROM customers
WHERE points > 3000
ORDER BY first_name 


*********************

USE sql_invoicing;
CREATE TABLE invoices_archived AS
SELECT 
	i.invoice_id,
    i.number,
    c.name AS client
    i.invoice_total,
    i.payment_total,
    i.invoice_date,
    i.due_date,
    i.payment_date
FROM invoices i
JOIN clients c
	USING (client_id)
WHERE i.payment_date IS NOT NULL;

**********************

USE sql_store;
UPDATE customers
SET points = points + 50
WHERE birth_date < '1990-01-01';

***********************

USE sql_store;
UPDATE orders o
SET o.comments = 'Gold customer'
WHERE o.customer_id IN
		(SELECT customer_id
		FROM customers c
		WHERE c.points > 3000)